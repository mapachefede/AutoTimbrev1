# --- Timbre 9
- alias: "Timbres con repeticiones - Botón (Timbre 9)"
  mode: restart
  trigger:
    - platform: state
      entity_id: input_boolean.timbre_9_button
      to: "on"
  action:
    - variables:
        repeticiones_global: "{{ states('input_number.timbre_repeticiones_global') | int(1) }}"
        ancho_pulso_global: "{{ states('input_number.sonoff_10021c07d7_pulsewidth') | float(0.5) }}"
    # Activamos el modo pulso en el dispositivo Sonoff
    - service: switch.turn_on
      target:
        entity_id: switch.sonoff_10021c07d7_pulse
    # Configuramos el ancho del pulso en el dispositivo Sonoff
    - service: number.set_value
      target:
        entity_id: number.sonoff_10021c07d7_pulsewidth
      data:
        value: "{{ ancho_pulso_global }}"
    # Método mejorado que valida la ejecución completa del pulso
    - repeat:
        count: "{{ repeticiones_global }}"
        sequence:
          # Guardamos el estado actual del switch
          - variables:
              estado_inicial: "{{ states('switch.sonoff_10021c07d7') }}"
          # Encendemos el switch manualmente
          - service: switch.turn_on
            target:
              entity_id: switch.sonoff_10021c07d7
          # Esperamos a que el switch cambie a estado 'on'
          - wait_template: "{{ states('switch.sonoff_10021c07d7') == 'on' }}"
            timeout: "00:00:05"
            continue_on_timeout: false
          # Esperamos el tiempo exacto del pulso
          - delay:
              seconds: "{{ ancho_pulso_global }}"
          # Apagamos el switch manualmente
          - service: switch.turn_off
            target:
              entity_id: switch.sonoff_10021c07d7
          # Esperamos a que el switch cambie a estado 'off'
          - wait_template: "{{ states('switch.sonoff_10021c07d7') == 'off' }}"
            timeout: "00:00:05"
            continue_on_timeout: false
          # Esperamos el tiempo de delay entre repeticiones
          - delay:
              seconds: "{{ states('input_number.delay_entre_repeticiones_timbres_1_8') | float(0.5) }}"
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.timbre_9_button

# --- Timbre 10
- alias: "Timbres con repeticiones - Botón (Timbre 10)"
  mode: restart
  trigger:
    - platform: state
      entity_id: input_boolean.timbre_10_button
      # Se dispara con cualquier cambio de estado (on a off, off a on)
  action:
    - variables:
        repeticiones: "{{ states('input_number.numero_de_timbres_timbre_10') | int(0) }}"
        ejecuciones:  "{{ states('input_number.timbre_ejecuciones_10') | int(0) }}"
        espera:       "{{ states('input_number.delay_entre_ejecuciones_timbre_10') | int(0) }}"
        ancho_pulso: "{{ states('input_number.sonoff_10021c07d7_pulsewidth_timbre_10') | float(0.5) }}"
    # Activamos el modo pulso en el dispositivo Sonoff
    - service: switch.turn_on
      target:
        entity_id: switch.sonoff_10021c07d7_pulse
    # Configuramos el ancho del pulso en el dispositivo Sonoff
    - service: number.set_value
      target:
        entity_id: number.sonoff_10021c07d7_pulsewidth
      data:
        value: "{{ ancho_pulso }}"
    # Ejecuta el bucle SOLO si el input_boolean está 'on'
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.timbre_10_button
              state: "on"
          sequence:
            - repeat:
                count: "{{ ejecuciones }}"
                sequence:
                  - repeat:
                      count: "{{ repeticiones }}"
                      sequence:
                        # Guardamos el estado actual del switch
                        - variables:
                            estado_inicial: "{{ states('switch.sonoff_10021c07d7') }}"
                        # Encendemos el switch manualmente
                        - service: switch.turn_on
                          target:
                            entity_id: switch.sonoff_10021c07d7
                        # Esperamos a que el switch cambie a estado 'on'
                        - wait_template: "{{ states('switch.sonoff_10021c07d7') == 'on' }}"
                          timeout: "00:00:05"
                          continue_on_timeout: false
                        # Esperamos el tiempo exacto del pulso
                        - delay:
                            seconds: "{{ ancho_pulso }}"
                        # Apagamos el switch manualmente
                        - service: switch.turn_off
                          target:
                            entity_id: switch.sonoff_10021c07d7
                        # Esperamos a que el switch cambie a estado 'off'
                        - wait_template: "{{ states('switch.sonoff_10021c07d7') == 'off' }}"
                          timeout: "00:00:05"
                          continue_on_timeout: false
                        # Esperamos un tiempo entre repeticiones
                        - delay:
                            seconds: "{{ ancho_pulso / 2 }}"
                  # Esperamos entre ejecuciones
                  - delay:
                      seconds: "{{ espera }}"

- alias: "Timbres Programados (Timbres 1 a 8)"
  mode: restart
  trigger:
    - platform: time
      at: input_datetime.timbre_1
    - platform: time
      at: input_datetime.timbre_2
    - platform: time
      at: input_datetime.timbre_3
    - platform: time
      at: input_datetime.timbre_4
    - platform: time
      at: input_datetime.timbre_5
    - platform: time
      at: input_datetime.timbre_6
    - platform: time
      at: input_datetime.timbre_7
    - platform: time
      at: input_datetime.timbre_8
  action:
    - variables:
        repeticiones_global: "{{ states('input_number.timbre_repeticiones_global') | int(1) }}"
        ancho_pulso_global: "{{ states('input_number.sonoff_10021c07d7_pulsewidth') | float(0.5) }}"
    # Activamos el modo pulso en el dispositivo Sonoff
    - service: switch.turn_on
      target:
        entity_id: switch.sonoff_10021c07d7_pulse
    # Configuramos el ancho del pulso en el dispositivo Sonoff
    - service: number.set_value
      target:
        entity_id: number.sonoff_10021c07d7_pulsewidth
      data:
        value: "{{ ancho_pulso_global }}"
    # Método mejorado que valida la ejecución completa del pulso
    - repeat:
        count: "{{ repeticiones_global }}"
        sequence:
          # Guardamos el estado actual del switch
          - variables:
              estado_inicial: "{{ states('switch.sonoff_10021c07d7') }}"
          # Encendemos el switch manualmente
          - service: switch.turn_on
            target:
              entity_id: switch.sonoff_10021c07d7
          # Esperamos a que el switch cambie a estado 'on'
          - wait_template: "{{ states('switch.sonoff_10021c07d7') == 'on' }}"
            timeout: "00:00:05"
            continue_on_timeout: false
          # Esperamos el tiempo exacto del pulso
          - delay:
              seconds: "{{ ancho_pulso_global }}"
          # Apagamos el switch manualmente
          - service: switch.turn_off
            target:
              entity_id: switch.sonoff_10021c07d7
          # Esperamos a que el switch cambie a estado 'off'
          - wait_template: "{{ states('switch.sonoff_10021c07d7') == 'off' }}"
            timeout: "00:00:05"
            continue_on_timeout: false
          # Esperamos el tiempo de delay entre repeticiones
          - delay:
              seconds: "{{ states('input_number.delay_entre_repeticiones_timbres_1_8') | float(0.5) }}"